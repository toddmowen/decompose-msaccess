'
' Usage: decompose-msaccess.vbs DATABASE [OUTPUT FOLDER]
'
' Generates a set of source files and a mainline build script compose-XXX.vbs
' which can be used to rebuild the specified database.
'
' Based on code by Oliver:
' http://stackoverflow.com/questions/187506/how-do-you-use-version-control-with-access-development


Option Explicit

Const acCmdAppMaximize = 10
Const acQuery = 1 
Const acForm = 2 
Const acReport = 3
Const acMacro = 4 
Const acModule = 5 
Const acDataAccessPage = 6


Dim fso, sInputFile, sOutputFolder, oAccess

If (WScript.Arguments.Count <> 1 And WScript.Arguments.Count <> 2) Then 
	Usage()
	WScript.Quit() 
End If

Set fso = CreateObject("Scripting.FileSystemObject")
sInputFile = fso.GetAbsolutePathName(WScript.Arguments(0))

If WScript.Arguments.Count = 2 Then
	sOutputFolder = fso.GetAbsolutePathName(WScript.Arguments(1))
Else
	sOutputFolder = fso.GetParentFolderName(sInputFile)
End If

Set oAccess = CreateObject("Access.Application")

' If database is unsigned and needs to show the "Security Warning" dialog,
' then it appears in a window half the screen width, and unless we maximize
' now then this annoying window size will be remembered next time Access
' is run.
oAccess.Visible = True
oAccess.RunCommand acCmdAppMaximize
oAccess.OpenCurrentDatabase sInputFile
oAccess.Visible = False

DecomposeDatabase oAccess, sOutputFolder
oAccess.CloseCurrentDatabase
oAccess.Quit 

MsgBox sInputFile + " decomposed to folder " + sOutputFolder + ".", vbInformation, "Decompose MS-Access"
WScript.Quit()


Function Usage()
	MsgBox "Usage: decompose-msaccess.vbs DATABASE [OUTPUT FOLDER]", vbInformation, "Decompose MS-Access"
End Function


Function writeScriptHeader(oScriptStream)
	oScriptStream.WriteLine "'"
	oScriptStream.WriteLine "' DO NOT EDIT THIS FILE."
	oScriptStream.WriteLine "' Automatically generated by decompose-msaccess.vbs"
	oScriptStream.WriteLine "'"
	oScriptStream.WriteLine
End Function


Function writeScriptFunctions(oScriptStream)
	oScriptStream.WriteLine "Function SetProperty(oAccess, sPropName, propType, propValue)"
	oScriptStream.WriteLine "	On Error Resume Next"
	oScriptStream.WriteLine "	oAccess.CurrentDb.Properties(sPropName) = propValue"
	oScriptStream.WriteLine "	If Err.Number = 3270 Then"
	oScriptStream.WriteLine "		Err.Clear"
	oScriptStream.WriteLine "		oAccess.CurrentDb.Properties.Append oAccess.CurrentDb.CreateProperty(sPropName, propType, propValue)"
	oScriptStream.WriteLine "	End If"
	oScriptStream.WriteLine "End Function"
	oScriptStream.WriteLine
End Function


Function DecomposeDatabase(oAccess, sOutputFolder)
	Dim sScriptFile, oScriptStream

	sScriptFile = fso.BuildPath(sOutputFolder, "compose-" & fso.GetBaseName(oAccess.CurrentProject.Name) & ".vbs")
	Set oScriptStream = fso.CreateTextFile(sScriptFile, True)
        writeScriptHeader oScriptStream
	writeScriptFunctions oScriptStream

	ScriptCreate oAccess, oScriptStream
	ScriptProperties oAccess, oScriptStream
	ScriptObjects oAccess, oScriptStream, sOutputFolder
	ScriptClose oAccess, oScriptStream

	oScriptStream.Close
End Function


Function ScriptProperties(oAccess, oScriptStream)
	Dim prop

	On Error Resume Next
	For Each prop In oAccess.CurrentDb.Properties
		If prop.Name <> "Name" Then
			oScriptStream.WriteLine "SetProperty oAccess, """ & prop.Name & """, " & CStr(prop.Type) & ", """ & Replace(prop.Value, """", """""") & """"
			If Err.Number <> 0 Then
				oScriptStream.WriteLine "' (property " & prop.Name & " cannot be decomposed)"
				Err.Clear
			End If
		End If
	Next
	oScriptStream.WriteLine
End Function


Function ScriptObject(oAccess, oScriptStream, sOutputFolder, sSubFolder, sObjectName, objectType, sExtension)
	Dim sFolderName, sFolderPath, sFileName

	sFolderPath = fso.BuildPath(sOutputFolder, sSubFolder)
	If Not fso.FolderExists(sFolderPath) Then
		fso.CreateFolder(sFolderPath)
	End If

	sFileName = sObjectName & "." & sExtension
	oAccess.SaveAsText objectType, sObjectName, fso.BuildPath(sFolderPath, sFileName)
	oScriptStream.WriteLine "oAccess.LoadFromText " & CStr(objectType) & ", """ & sObjectName & """, fso.BuildPath(sInputFolder, """ & sSubFolder & "\" & sFileName & """)"
End Function


Function ScriptObjects(oAccess, oScriptStream, sOutputFolder)
	Dim obj, sSubFolder

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-forms"
	For Each obj In oAccess.CurrentProject.AllForms
		ScriptObject oAccess, oScriptStream, sOutputFolder, sSubFolder, obj.FullName, acForm, "ADF"
	Next
	oScriptStream.WriteLine

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-queries"
	For Each obj In oAccess.CurrentData.AllQueries
		ScriptObject oAccess, oScriptStream, sOutputFolder, sSubFolder, obj.FullName, acQuery, "ADQ"
	Next
	oScriptStream.WriteLine
End Function


Function ScriptCreate(oAccess, oScriptStream)
	Dim sConnectionString

	sConnectionString = "Provider=" & oAccess.CurrentProject.Connection.Provider _
		& ";Data Source="" & sOutputFile & """ _
		& ";Jet OLEDB:Engine Type=" & oAccess.CurrentProject.Connection.Properties("Jet OLEDB:Engine Type")

	oScriptStream.WriteLine "Set fso = CreateObject(""Scripting.FileSystemObject"")"
	oScriptStream.WriteLine "sInputFolder = fso.GetParentFolderName(WScript.ScriptFullName)"
	oScriptStream.WriteLine "If WScript.Arguments.Count = 1 Then"
	oScriptStream.WriteLine "    sOutputFile = fso.GetAbsolutePathName(WScript.Arguments(0))"
	oScriptStream.WriteLine "Else"
	oScriptStream.WriteLine "    sOutputFile = fso.BuildPath(sInputFolder, """ & oAccess.CurrentProject.Name & """)"
	oScriptStream.WriteLine "End If"
	oScriptStream.WriteLine
	oScriptStream.WriteLine "Set oCatalog = CreateObject(""ADOX.Catalog"")"
	oScriptStream.WriteLine "oCatalog.Create """ & sConnectionString & """"
	oScriptStream.WriteLine "oCatalog.ActiveConnection.Close"
	oScriptStream.WriteLine
	oScriptStream.WriteLine "Set oAccess = CreateObject(""Access.Application"")"
	oScriptStream.WriteLine "oAccess.Visible = True"
	oScriptStream.WriteLine "oAccess.RunCommand " & CStr(acCmdAppMaximize)
	oScriptStream.WriteLine "oAccess.Visible = False"
	oScriptStream.WriteLine "oAccess.OpenCurrentDatabase sOutputFile"
	oScriptStream.WriteLine
End Function


Function ScriptClose(oAccess, oScriptStream)
	oScriptStream.WriteLine "MsgBox ""Re-composed "" + oAccess.CurrentProject.FullName + ""."", vbInformation, ""Decompose MS-Access"""
	oScriptStream.WriteLine "oAccess.CloseCurrentDatabase"
	oScriptStream.WriteLine "oAccess.Quit"
	oScriptStream.WriteLine
End Function
'
' Usage: decompose-msaccess.vbs DATABASE [OUTPUT FOLDER]
'
' Generates a set of source files and a mainline build script compose-XXX.vbs
' which can be used to rebuild the specified database.
'
' To download the latest release or contribute to this project, visit:
' http://github.com/toddmowen/decompose-msaccess
'
' Inspiration for this project came from Oliver:
' http://stackoverflow.com/questions/187506/how-do-you-use-version-control-with-access-development
'
'
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
'


Option Explicit

Const acCmdAppMaximize = 10
Const acAppendData = 2

Const acTable = 0
Const acQuery = 1 
Const acForm = 2 
Const acReport = 3
Const acMacro = 4 
Const acModule = 5 
Const acDataAccessPage = 6


Dim fso, sInputFile, sOutputFolder, oAccess

If (WScript.Arguments.Count <> 1 And WScript.Arguments.Count <> 2) Then 
	Usage()
	WScript.Quit() 
End If

Set fso = CreateObject("Scripting.FileSystemObject")
sInputFile = fso.GetAbsolutePathName(WScript.Arguments(0))

If WScript.Arguments.Count = 2 Then
	sOutputFolder = fso.GetAbsolutePathName(WScript.Arguments(1))
Else
	sOutputFolder = fso.GetParentFolderName(sInputFile)
End If

Set oAccess = CreateObject("Access.Application")

' If database is unsigned and needs to show the "Security Warning" dialog,
' then it appears in a window half the screen width, and unless we maximize
' now then this annoying window size will be remembered next time Access
' is run.
oAccess.Visible = True
oAccess.RunCommand acCmdAppMaximize
oAccess.OpenCurrentDatabase sInputFile
oAccess.Visible = False

DecomposeDatabase oAccess, sOutputFolder
oAccess.CloseCurrentDatabase
oAccess.Quit 

MsgBox sInputFile + " decomposed to folder " + sOutputFolder + ".", vbInformation, "Decompose MS-Access"
WScript.Quit()


Function Usage()
	MsgBox "Usage: decompose-msaccess.vbs DATABASE [OUTPUT FOLDER]", vbInformation, "Decompose MS-Access"
End Function


Function DecomposeDatabase(oAccess, sOutputFolder)
	Dim sScriptFile, oScriptStream

	sScriptFile = fso.BuildPath(sOutputFolder, "compose-" & fso.GetBaseName(oAccess.CurrentProject.Name) & ".vbs")
	Set oScriptStream = fso.CreateTextFile(sScriptFile, True)
        writeScriptHeader oScriptStream
        writeScriptFunctions oScriptStream

	ScriptCreate oAccess, oScriptStream
	ScriptProperties oAccess, oScriptStream
	ScriptReferences oAccess, oScriptStream
	ScriptTables oAccess, oScriptStream, sOutputFolder
	ScriptObjects oAccess, oScriptStream, sOutputFolder
	ScriptClose oAccess, oScriptStream

	oScriptStream.Close
End Function


Function writeScriptHeader(oScriptStream)
	oScriptStream.WriteLine "'"
	oScriptStream.WriteLine "' DO NOT EDIT THIS FILE."
	oScriptStream.WriteLine "' Automatically generated by decompose-msaccess.vbs"
	oScriptStream.WriteLine "'"
	oScriptStream.WriteLine
End Function


Function writeScriptFunctions(oScriptStream)
	oScriptStream.WriteLine "Function SetProperty(oAccess, sPropName, propType, propValue)"
	oScriptStream.WriteLine "	On Error Resume Next"
	oScriptStream.WriteLine "	oAccess.CurrentDb.Properties(sPropName) = propValue"
	oScriptStream.WriteLine "	If Err.Number = 3270 Then"
	oScriptStream.WriteLine "		Err.Clear"
	oScriptStream.WriteLine "		oAccess.CurrentDb.Properties.Append oAccess.CurrentDb.CreateProperty(sPropName, propType, propValue)"
	oScriptStream.WriteLine "	End If"
	oScriptStream.WriteLine "End Function"
	oScriptStream.WriteLine
End Function


Function ScriptTables(oAccess, oScriptStream, sOutputFolder)
	Dim arrTables, sSubFolder, sTableName

	arrTables = OrderTables(oAccess.CurrentDb)

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-schema"
	For Each sTableName In arrTables
		ScriptTableSchema oAccess, oScriptStream, sOutputFolder, sSubFolder, sTableName
	Next
	oScriptStream.WriteLine

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-data"
	For Each sTableName In arrTables
		If oAccess.CurrentDb.TableDefs(sTableName).RecordCount > 0 Then
			ScriptTableData oAccess, oScriptStream, sOutputFolder, sSubFolder, sTableName
		End If
	Next
	oScriptStream.WriteLine
End Function


Function ScriptTableSchema(oAccess, oScriptStream, sOutputFolder, sSubFolder, sTableName)
	oAccess.ExportXML acTable, sTableName, , ExportPath(sOutputFolder, sSubFolder, sTableName & ".XML")
	oScriptStream.WriteLine "oAccess.ImportXML " & ImportPath(sSubFolder, sTableName & ".XML")
End Function


Function ScriptTableData(oAccess, oScriptStream, sOutputFolder, sSubFolder, sTableName)
	oAccess.ExportXML acTable, sTableName, ExportPath(sOutputFolder, sSubFolder, sTableName & ".XML")
	oScriptStream.WriteLine "oAccess.ImportXML " & ImportPath(sSubFolder, sTableName & ".XML") & ", " & CStr(acAppendData)
End Function


' Return an array of table names in an order such that child tables
' appear after their parents (i.e. a topological sort).
Function OrderTables(db)
	Dim oRelation, oTableDef, dictParents, dictChildren
	Dim arrOrdered(), orderedCount, i
	Dim sParentName, sChildName

	Set dictParents = CreateObject("Scripting.Dictionary")
	Set dictChildren = CreateObject("Scripting.Dictionary")
	For Each oRelation In db.Relations
		If Not dictChildren.Exists(oRelation.Table) Then
			dictChildren.Add oRelation.Table, CreateObject("Scripting.Dictionary")
		End If
		dictChildren(oRelation.Table).Add oRelation.ForeignTable, oRelation

		If Not dictParents.Exists(oRelation.ForeignTable) Then
			dictParents.Add oRelation.ForeignTable, CreateObject("Scripting.Dictionary")
		End If
		dictParents(oRelation.ForeignTable).Add oRelation.Table, oRelation
	Next

	' Root nodes are those tables *not* in dictChildren
	orderedCount = 0
	For Each oTableDef In db.TableDefs
		If Left(oTableDef.Name, 4) <> "MSys" And Not dictChildren.Exists(oTableDef.Name) Then
			ReDim Preserve arrOrdered(orderedCount)
			arrOrdered(orderedCount) = oTableDef.Name
			orderedCount = orderedCount + 1
		End If
	Next

	i = 0
	While i <= UBound(arrOrdered)
		sParentName = arrOrdered(i)
		If dictParents.Exists(sParentName) Then
			For Each sChildName In dictParents(sParentName)
				dictChildren(sChildName).Remove sParentName
				If dictChildren(sChildName).Count = 0 Then
					dictChildren.Remove sChildName
					ReDim Preserve arrOrdered(orderedCount)
					arrOrdered(orderedCount) = sChildName
					orderedCount = orderedCount + 1
				End If
			Next
			dictParents.Remove sParentName
		End If
		i = i + 1
	Wend

	OrderTables = arrOrdered
End Function


Function ScriptProperties(oAccess, oScriptStream)
	Dim prop

	For Each prop In oAccess.CurrentDb.Properties
		If Not isReadOnlyProperty(prop.Name) Then
			oScriptStream.WriteLine "SetProperty oAccess, """ & prop.Name & """, " & CStr(prop.Type) & ", """ & Replace(prop.Value, """", """""") & """"
		End If
	Next
	oScriptStream.WriteLine
End Function


Function ScriptReferences(oAccess, oScriptStream)
	' Remove all initial references (except "builtin" ones)
	oScriptStream.WriteLine "For Each oRef In oAccess.References"
	oScriptStream.WriteLine "	If Not oRef.BuiltIn Then oAccess.References.Remove oRef"
	oScriptStream.WriteLine "Next"

	Dim oRef
	For Each oRef in oAccess.References
		If Not oRef.BuiltIn Then
			oScriptStream.WriteLine "oAccess.References.AddFromGuid """ & oRef.Guid & """ , " & CStr(oRef.Major) & ", " & Cstr(oRef.Minor)
		End If
	Next
	oScriptStream.WriteLine
End Function


Function ScriptObject(oAccess, oScriptStream, sOutputFolder, sSubFolder, sObjectName, objectType, sExtension)
	Dim sFileName

	sFileName = sObjectName & "." & sExtension
	oAccess.SaveAsText objectType, sObjectName, ExportPath(sOutputFolder, sSubFolder, sFileName)
	oScriptStream.WriteLine "oAccess.LoadFromText " & CStr(objectType) & ", """ & sObjectName & """, " & ImportPath(sSubFolder, sFileName)
End Function


Function ScriptObjects(oAccess, oScriptStream, sOutputFolder)
	Dim obj, sSubFolder

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-forms"
	For Each obj In oAccess.CurrentProject.AllForms
		ScriptObject oAccess, oScriptStream, sOutputFolder, sSubFolder, obj.FullName, acForm, "ADF"
	Next
	oScriptStream.WriteLine

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-queries"
	For Each obj In oAccess.CurrentData.AllQueries
		ScriptObject oAccess, oScriptStream, sOutputFolder, sSubFolder, obj.FullName, acQuery, "ADQ"
	Next
	oScriptStream.WriteLine
End Function


Function ScriptCreate(oAccess, oScriptStream)
	Dim sLocale, options

	sLocale = getLocale(oAccess.CurrentDb)
	options = getVersion(oAccess.CurrentDb)

	oScriptStream.WriteLine "Set fso = CreateObject(""Scripting.FileSystemObject"")"
	oScriptStream.WriteLine "sInputFolder = fso.GetParentFolderName(WScript.ScriptFullName)"
	oScriptStream.WriteLine "If WScript.Arguments.Count = 1 Then"
	oScriptStream.WriteLine "    sOutputFile = fso.GetAbsolutePathName(WScript.Arguments(0))"
	oScriptStream.WriteLine "Else"
	oScriptStream.WriteLine "    sOutputFile = fso.BuildPath(sInputFolder, """ & oAccess.CurrentProject.Name & """)"
	oScriptStream.WriteLine "End If"
	oScriptStream.WriteLine
	oScriptStream.WriteLine "Set oAccess = CreateObject(""Access.Application"")"
	oScriptStream.WriteLine "Set db = oAccess.DBEngine.Workspaces(0).CreateDatabase(sOutputFile, """ & sLocale & """, " & options & ")"
	oScriptStream.WriteLine "db.Close"
	oScriptStream.WriteLine "oAccess.Visible = True"
	oScriptStream.WriteLine "oAccess.RunCommand " & CStr(acCmdAppMaximize)
	oScriptStream.WriteLine "oAccess.Visible = False"
	oScriptStream.WriteLine "oAccess.OpenCurrentDatabase sOutputFile"
	oScriptStream.WriteLine
End Function


Function ScriptClose(oAccess, oScriptStream)
	oScriptStream.WriteLine "MsgBox ""Re-composed "" + oAccess.CurrentProject.FullName + ""."", vbInformation, ""Decompose MS-Access"""
	oScriptStream.WriteLine "oAccess.CloseCurrentDatabase"
	oScriptStream.WriteLine "oAccess.Quit"
	oScriptStream.WriteLine
End Function


Function ExportPath(sOutputFolder, sSubFolder, sFileName)
	Dim sFolderPath

	sFolderPath = fso.BuildPath(sOutputFolder, sSubFolder)
	If Not fso.FolderExists(sFolderPath) Then
		fso.CreateFolder(sFolderPath)
	End If

	ExportPath = fso.BuildPath(sFolderPath, sFileName)
End Function


Function ImportPath(sSubFolder, sFileName)
        ImportPath = "fso.BuildPath(sInputFolder, """ & sSubFolder & "\" & sFileName & """)"
End Function


Function getLocale(db)
	Dim sLocale

	Select Case db.CollatingOrder
	Case 1033 ' dbLangGeneral
		sLocale = ";LANGID=0x0409;CP=1252;COUNTRY=0"
	Case 1025 ' dbLangArabic
		sLocale = ";LANGID=0x0401;CP=1256;COUNTRY=0"
	Case 2052 ' dbSorChineseSimplified
		sLocale = ";LANGID=0x0804;CP=936;COUNTRY=0"
	Case 1028 ' dbSorChineseTraditional
		sLocale = ";LANGID=0x0404;CP=950;COUNTRY=0"
	Case 1049 ' dbSorCyrillic
		sLocale = ";LANGID=0x0419;CP=1251;COUNTRY=0"
	Case 1029 ' dbSortCzech
		sLocale = ";LANGID=0x0405;CP=1250;COUNTRY=0"
	Case 1043 ' dbSortDutch
		sLocale = ";LANGID=0x0413;CP=1252;COUNTRY=0"
	Case 1032 ' dbSortGreek
		sLocale = ";LANGID=0x0408;CP=1253;COUNTRY=0"
	Case 1037 ' dbSortHebrew
		sLocale = ";LANGID=0x040D;CP=1255;COUNTRY=0"
	Case 1038 ' dbSortHungarian
		sLocale = ";LANGID=0x040E;CP=1250;COUNTRY=0"
	Case 1039 ' dbSortIcelandic
		sLocale = ";LANGID=0x040F;CP=1252;COUNTRY=0"
	Case 1041 ' dbSortJapanese
		sLocale = ";LANGID=0x0411;CP=932;COUNTRY=0"
	Case 1042 ' dbSortKorean
		sLocale = ";LANGID=0x0412;CP=949;COUNTRY=0"
	Case 1030 ' dbSortNorwDan
		sLocale = ";LANGID=0x0406;CP=1252;COUNTRY=0"
	Case 1045 ' dbSortNorwDan
		sLocale = ";LANGID=0x0415;CP=1250;COUNTRY=0"
	Case 1060 ' dbSortSlovenian
		sLocale = ";LANGID=0x0424;CP=1250;COUNTRY=0"
	Case 1034 ' dbSortSpanish
		sLocale = ";LANGID=0x040A;CP=1252;COUNTRY=0"
	Case 1053 ' dbSortSwedFin
		sLocale = ";LANGID=0x041D;CP=1252;COUNTRY=0"
	Case 1054 ' dbSortThai
		sLocale = ";LANGID=0x041E;CP=874;COUNTRY=0"
	Case 1055 ' dbSortTurkish
		sLocale = ";LANGID=0x041F;CP=1254;COUNTRY=0"
	Case Else
		Err.Raise "Unknown collating order", , 513
	End Select

	getLocale = sLocale
End Function

Function getVersion(db)
	Dim version

	Select Case db.Version
	Case "1.0"
		version = 1
	Case "1.1"
		version = 8
	Case "2.0"
		version = 16
	Case "3.0"
		version = 32
	Case "4.0"
		version = 64
	Case Else
		Err.Raise "Unknown JET version", , 513
	End Select

	getVersion = version
End Function

Function isReadOnlyProperty(sPropName)
	' Access 2007 database properties are documented here:
	' http://msdn.microsoft.com/en-us/library/ee291998(office.12).aspx

	Select Case sPropName
	Case "CollatingOrder", "Connect", "Connection", "Name", "RecordsAffected", _
	  "Transactions", "Updatable", "Version"
		isReadOnlyProperty = True
	Case "DesignMasterID", "ReplicaID"
		' Decomposing replicated databases has not been tested
		isReadOnlyProperty = True
	Case Else
		isReadOnlyProperty = False
	End Select
End Function
