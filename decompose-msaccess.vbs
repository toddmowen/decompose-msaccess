'
' Usage: decompose-msaccess.vbs DATABASE [OUTPUT FOLDER]
'
' Generates a set of source files and a mainline build script compose-XXX.vbs
' which can be used to rebuild the specified database.
'
' Based on code by Oliver:
' http://stackoverflow.com/questions/187506/how-do-you-use-version-control-with-access-development


Option Explicit

Const acCmdAppMaximize = 10
Const acQuery = 1 
Const acForm = 2 
Const acReport = 3
Const acMacro = 4 
Const acModule = 5 
Const acDataAccessPage = 6


Dim fso, sInputFile, sOutputFolder, oAccess

If (WScript.Arguments.Count <> 1 And WScript.Arguments.Count <> 2) Then 
	Usage()
	WScript.Quit() 
End If

Set fso = CreateObject("Scripting.FileSystemObject")
sInputFile = fso.GetAbsolutePathName(WScript.Arguments(0))

If WScript.Arguments.Count = 2 Then
	sOutputFolder = fso.GetAbsolutePathName(WScript.Arguments(1))
Else
	sOutputFolder = fso.GetParentFolderName(sInputFile)
End If

Set oAccess = CreateObject("Access.Application")

' If database is unsigned and needs to show the "Security Warning" dialog,
' then it appears in a window half the screen width, and unless we maximize
' now then this annoying window size will be remembered next time Access
' is run.
oAccess.Visible = True
oAccess.RunCommand acCmdAppMaximize
oAccess.OpenCurrentDatabase sInputFile
oAccess.Visible = False

DecomposeDatabase oAccess, sOutputFolder
oAccess.CloseCurrentDatabase
oAccess.Quit 

MsgBox sInputFile + " decomposed to folder " + sOutputFolder + ".", vbInformation, "Decompose MS-Access"
WScript.Quit()


Function Usage()
	MsgBox "Usage: decompose-msaccess.vbs DATABASE [OUTPUT FOLDER]", vbInformation, "Decompose MS-Access"
End Function


Function writeScriptHeader(oScriptStream)
	oScriptStream.WriteLine "'"
	oScriptStream.WriteLine "' DO NOT EDIT THIS FILE."
	oScriptStream.WriteLine "' Automatically generated by decompose-msaccess.vbs"
	oScriptStream.WriteLine "'"
	oScriptStream.WriteLine
End Function


Function writeScriptFunctions(oScriptStream)
	oScriptStream.WriteLine "Function SetProperty(oAccess, sPropName, propType, propValue)"
	oScriptStream.WriteLine "	On Error Resume Next"
	oScriptStream.WriteLine "	oAccess.CurrentDb.Properties(sPropName) = propValue"
	oScriptStream.WriteLine "	If Err.Number = 3270 Then"
	oScriptStream.WriteLine "		Err.Clear"
	oScriptStream.WriteLine "		oAccess.CurrentDb.Properties.Append oAccess.CurrentDb.CreateProperty(sPropName, propType, propValue)"
	oScriptStream.WriteLine "	End If"
	oScriptStream.WriteLine "End Function"
	oScriptStream.WriteLine
End Function


Function DecomposeDatabase(oAccess, sOutputFolder)
	Dim sScriptFile, oScriptStream

	sScriptFile = fso.BuildPath(sOutputFolder, "compose-" & fso.GetBaseName(oAccess.CurrentProject.Name) & ".vbs")
	Set oScriptStream = fso.CreateTextFile(sScriptFile, True)
        writeScriptHeader oScriptStream
	writeScriptFunctions oScriptStream

	ScriptCreate oAccess, oScriptStream
	ScriptProperties oAccess, oScriptStream
	ScriptObjects oAccess, oScriptStream, sOutputFolder
	ScriptClose oAccess, oScriptStream

	oScriptStream.Close
End Function


Function ScriptProperties(oAccess, oScriptStream)
	Dim prop

	On Error Resume Next
	For Each prop In oAccess.CurrentDb.Properties
		If prop.Name <> "Name" Then
			oScriptStream.WriteLine "SetProperty oAccess, """ & prop.Name & """, " & CStr(prop.Type) & ", """ & Replace(prop.Value, """", """""") & """"
			If Err.Number <> 0 Then
				oScriptStream.WriteLine "' (property " & prop.Name & " cannot be decomposed)"
				Err.Clear
			End If
		End If
	Next
	oScriptStream.WriteLine
End Function


Function ScriptObject(oAccess, oScriptStream, sOutputFolder, sSubFolder, sObjectName, objectType, sExtension)
	Dim sFolderName, sFolderPath, sFileName

	sFolderPath = fso.BuildPath(sOutputFolder, sSubFolder)
	If Not fso.FolderExists(sFolderPath) Then
		fso.CreateFolder(sFolderPath)
	End If

	sFileName = sObjectName & "." & sExtension
	oAccess.SaveAsText objectType, sObjectName, fso.BuildPath(sFolderPath, sFileName)
	oScriptStream.WriteLine "oAccess.LoadFromText " & CStr(objectType) & ", """ & sObjectName & """, fso.BuildPath(sInputFolder, """ & sSubFolder & "\" & sFileName & """)"
End Function


Function ScriptObjects(oAccess, oScriptStream, sOutputFolder)
	Dim obj, sSubFolder

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-forms"
	For Each obj In oAccess.CurrentProject.AllForms
		ScriptObject oAccess, oScriptStream, sOutputFolder, sSubFolder, obj.FullName, acForm, "ADF"
	Next
	oScriptStream.WriteLine

	sSubFolder = fso.GetBaseName(oAccess.CurrentProject.Name) & "-queries"
	For Each obj In oAccess.CurrentData.AllQueries
		ScriptObject oAccess, oScriptStream, sOutputFolder, sSubFolder, obj.FullName, acQuery, "ADQ"
	Next
	oScriptStream.WriteLine
End Function


Function ScriptCreate(oAccess, oScriptStream)
	Dim sConnectionString

	sConnectionString = "Provider=" & oAccess.CurrentProject.Connection.Provider _
		& ";Data Source="" & sOutputFile & """ _
		& ";Jet OLEDB:Engine Type=" & oAccess.CurrentProject.Connection.Properties("Jet OLEDB:Engine Type")

	oScriptStream.WriteLine "Set fso = CreateObject(""Scripting.FileSystemObject"")"
	oScriptStream.WriteLine "sInputFolder = fso.GetParentFolderName(WScript.ScriptFullName)"
	oScriptStream.WriteLine "If WScript.Arguments.Count = 1 Then"
	oScriptStream.WriteLine "    sOutputFile = fso.GetAbsolutePathName(WScript.Arguments(0))"
	oScriptStream.WriteLine "Else"
	oScriptStream.WriteLine "    sOutputFile = fso.BuildPath(sInputFolder, """ & oAccess.CurrentProject.Name & """)"
	oScriptStream.WriteLine "End If"
	oScriptStream.WriteLine
	oScriptStream.WriteLine "Set oCatalog = CreateObject(""ADOX.Catalog"")"
	oScriptStream.WriteLine "oCatalog.Create """ & sConnectionString & """"
	oScriptStream.WriteLine "oCatalog.ActiveConnection.Close"
	oScriptStream.WriteLine
	oScriptStream.WriteLine "Set oAccess = CreateObject(""Access.Application"")"
	oScriptStream.WriteLine "oAccess.Visible = True"
	oScriptStream.WriteLine "oAccess.RunCommand " & CStr(acCmdAppMaximize)
	oScriptStream.WriteLine "oAccess.Visible = False"
	oScriptStream.WriteLine "oAccess.OpenCurrentDatabase sOutputFile"
	oScriptStream.WriteLine
End Function


Function ScriptClose(oAccess, oScriptStream)
	oScriptStream.WriteLine "MsgBox ""Re-composed "" + oAccess.CurrentProject.FullName + ""."", vbInformation, ""Decompose MS-Access"""
	oScriptStream.WriteLine "oAccess.CloseCurrentDatabase"
	oScriptStream.WriteLine "oAccess.Quit"
	oScriptStream.WriteLine
End Function
